// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcpgate.proto

package iproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MsgNotify struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgNotify) Reset()         { *m = MsgNotify{} }
func (m *MsgNotify) String() string { return proto.CompactTextString(m) }
func (*MsgNotify) ProtoMessage()    {}
func (*MsgNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d30d5155d328cc, []int{0}
}

func (m *MsgNotify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgNotify.Unmarshal(m, b)
}
func (m *MsgNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgNotify.Marshal(b, m, deterministic)
}
func (m *MsgNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNotify.Merge(m, src)
}
func (m *MsgNotify) XXX_Size() int {
	return xxx_messageInfo_MsgNotify.Size(m)
}
func (m *MsgNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNotify.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNotify proto.InternalMessageInfo

type MsgNotifyUser struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgNotifyUser) Reset()         { *m = MsgNotifyUser{} }
func (m *MsgNotifyUser) String() string { return proto.CompactTextString(m) }
func (*MsgNotifyUser) ProtoMessage()    {}
func (*MsgNotifyUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d30d5155d328cc, []int{1}
}

func (m *MsgNotifyUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgNotifyUser.Unmarshal(m, b)
}
func (m *MsgNotifyUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgNotifyUser.Marshal(b, m, deterministic)
}
func (m *MsgNotifyUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNotifyUser.Merge(m, src)
}
func (m *MsgNotifyUser) XXX_Size() int {
	return xxx_messageInfo_MsgNotifyUser.Size(m)
}
func (m *MsgNotifyUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNotifyUser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNotifyUser proto.InternalMessageInfo

type CommReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommReply) Reset()         { *m = CommReply{} }
func (m *CommReply) String() string { return proto.CompactTextString(m) }
func (*CommReply) ProtoMessage()    {}
func (*CommReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d30d5155d328cc, []int{2}
}

func (m *CommReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommReply.Unmarshal(m, b)
}
func (m *CommReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommReply.Marshal(b, m, deterministic)
}
func (m *CommReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommReply.Merge(m, src)
}
func (m *CommReply) XXX_Size() int {
	return xxx_messageInfo_CommReply.Size(m)
}
func (m *CommReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CommReply.DiscardUnknown(m)
}

var xxx_messageInfo_CommReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgNotify)(nil), "iproto.MsgNotify")
	proto.RegisterType((*MsgNotifyUser)(nil), "iproto.MsgNotifyUser")
	proto.RegisterType((*CommReply)(nil), "iproto.CommReply")
}

func init() { proto.RegisterFile("tcpgate.proto", fileDescriptor_83d30d5155d328cc) }

var fileDescriptor_83d30d5155d328cc = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x5b, 0x86, 0x54, 0x5c, 0x55, 0x41, 0x2d, 0x60, 0x88, 0x98, 0x32, 0x31, 0xb9, 0x60,
	0x16, 0x58, 0x0b, 0x52, 0xa7, 0x22, 0x54, 0x81, 0x98, 0xdd, 0xf4, 0x08, 0x11, 0x89, 0xcf, 0x8d,
	0x0f, 0x2a, 0x33, 0xf2, 0x28, 0x3c, 0x29, 0x6a, 0x92, 0xba, 0x12, 0xa5, 0xd3, 0x9d, 0x3f, 0xdf,
	0xa7, 0xbb, 0x1f, 0x06, 0x9c, 0xda, 0x4c, 0x33, 0x4a, 0x5b, 0x11, 0x93, 0x88, 0xf2, 0xba, 0xc6,
	0xe7, 0x19, 0x51, 0x56, 0xe0, 0x48, 0xdb, 0x7c, 0xa4, 0x8d, 0x21, 0xd6, 0x9c, 0x93, 0x71, 0xcd,
	0x54, 0x7c, 0x3c, 0xd7, 0xe9, 0x3b, 0x9a, 0x85, 0xfb, 0xac, 0x1a, 0x92, 0xf4, 0xe1, 0x70, 0xea,
	0xb2, 0x07, 0xe2, 0xfc, 0xd5, 0x27, 0x47, 0x30, 0x08, 0x8f, 0x67, 0x87, 0xd5, 0xfa, 0xf7, 0x8e,
	0xca, 0x72, 0x86, 0xb6, 0xf0, 0xea, 0xbb, 0x0b, 0xf0, 0x94, 0xda, 0x89, 0x66, 0x5c, 0x69, 0x2f,
	0x6e, 0xa1, 0x37, 0x45, 0x7e, 0xa3, 0xc5, 0x95, 0x38, 0x93, 0xcd, 0x76, 0xd9, 0x82, 0x19, 0x2e,
	0x3f, 0xd0, 0x71, 0x7c, 0xb2, 0xc3, 0x6d, 0xe1, 0x93, 0xce, 0x56, 0x55, 0x7f, 0x55, 0xb5, 0x47,
	0x55, 0xad, 0xaa, 0x3c, 0xf4, 0xdb, 0x1b, 0xee, 0x69, 0x65, 0xc4, 0x25, 0x44, 0xcd, 0xb9, 0x62,
	0x18, 0x84, 0x4d, 0x82, 0x38, 0xa0, 0x90, 0x21, 0xe9, 0x88, 0x1b, 0x80, 0x6d, 0x40, 0x71, 0xba,
	0x63, 0xad, 0xf1, 0xbf, 0xe6, 0xf8, 0x02, 0x86, 0x29, 0x95, 0xf2, 0x6b, 0x69, 0x90, 0xe5, 0xe4,
	0xa5, 0x1e, 0x18, 0xf7, 0xda, 0xe6, 0xb1, 0xfb, 0x73, 0xb0, 0xe9, 0xe7, 0x51, 0x5d, 0xae, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xd9, 0xb8, 0x52, 0xa4, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TcpGatewayClient is the client API for TcpGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TcpGatewayClient interface {
	// 后端服务1
	// 注释
	// @transmit
	// @target backendsvr1 后端目标服务名
	// @id 2 对应请求协议的id
	Method1(ctx context.Context, in *Method1Request, opts ...grpc.CallOption) (*Method1Reply, error)
	// 后端服务2
	// 注释
	// @transmit
	// @target backendsvr2 后端目标服务名
	// @id 3 对应请求协议的id
	Method2(ctx context.Context, in *Method2Request, opts ...grpc.CallOption) (*Method2Reply, error)
}

type tcpGatewayClient struct {
	cc *grpc.ClientConn
}

func NewTcpGatewayClient(cc *grpc.ClientConn) TcpGatewayClient {
	return &tcpGatewayClient{cc}
}

func (c *tcpGatewayClient) Method1(ctx context.Context, in *Method1Request, opts ...grpc.CallOption) (*Method1Reply, error) {
	out := new(Method1Reply)
	err := c.cc.Invoke(ctx, "/iproto.TcpGateway/Method1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpGatewayClient) Method2(ctx context.Context, in *Method2Request, opts ...grpc.CallOption) (*Method2Reply, error) {
	out := new(Method2Reply)
	err := c.cc.Invoke(ctx, "/iproto.TcpGateway/Method2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TcpGatewayServer is the server API for TcpGateway service.
type TcpGatewayServer interface {
	// 后端服务1
	// 注释
	// @transmit
	// @target backendsvr1 后端目标服务名
	// @id 2 对应请求协议的id
	Method1(context.Context, *Method1Request) (*Method1Reply, error)
	// 后端服务2
	// 注释
	// @transmit
	// @target backendsvr2 后端目标服务名
	// @id 3 对应请求协议的id
	Method2(context.Context, *Method2Request) (*Method2Reply, error)
}

// UnimplementedTcpGatewayServer can be embedded to have forward compatible implementations.
type UnimplementedTcpGatewayServer struct {
}

func (*UnimplementedTcpGatewayServer) Method1(ctx context.Context, req *Method1Request) (*Method1Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method1 not implemented")
}
func (*UnimplementedTcpGatewayServer) Method2(ctx context.Context, req *Method2Request) (*Method2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method2 not implemented")
}

func RegisterTcpGatewayServer(s *grpc.Server, srv TcpGatewayServer) {
	s.RegisterService(&_TcpGateway_serviceDesc, srv)
}

func _TcpGateway_Method1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Method1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpGatewayServer).Method1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iproto.TcpGateway/Method1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpGatewayServer).Method1(ctx, req.(*Method1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcpGateway_Method2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Method2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpGatewayServer).Method2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iproto.TcpGateway/Method2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpGatewayServer).Method2(ctx, req.(*Method2Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _TcpGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iproto.TcpGateway",
	HandlerType: (*TcpGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Method1",
			Handler:    _TcpGateway_Method1_Handler,
		},
		{
			MethodName: "Method2",
			Handler:    _TcpGateway_Method2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcpgate.proto",
}

// TcpGateDownClient is the client API for TcpGateDown service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TcpGateDownClient interface {
	// 广播通知
	Notify(ctx context.Context, in *MsgNotify, opts ...grpc.CallOption) (*CommReply, error)
	NotifyUser(ctx context.Context, in *MsgNotifyUser, opts ...grpc.CallOption) (*CommReply, error)
}

type tcpGateDownClient struct {
	cc *grpc.ClientConn
}

func NewTcpGateDownClient(cc *grpc.ClientConn) TcpGateDownClient {
	return &tcpGateDownClient{cc}
}

func (c *tcpGateDownClient) Notify(ctx context.Context, in *MsgNotify, opts ...grpc.CallOption) (*CommReply, error) {
	out := new(CommReply)
	err := c.cc.Invoke(ctx, "/iproto.TcpGateDown/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpGateDownClient) NotifyUser(ctx context.Context, in *MsgNotifyUser, opts ...grpc.CallOption) (*CommReply, error) {
	out := new(CommReply)
	err := c.cc.Invoke(ctx, "/iproto.TcpGateDown/NotifyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TcpGateDownServer is the server API for TcpGateDown service.
type TcpGateDownServer interface {
	// 广播通知
	Notify(context.Context, *MsgNotify) (*CommReply, error)
	NotifyUser(context.Context, *MsgNotifyUser) (*CommReply, error)
}

// UnimplementedTcpGateDownServer can be embedded to have forward compatible implementations.
type UnimplementedTcpGateDownServer struct {
}

func (*UnimplementedTcpGateDownServer) Notify(ctx context.Context, req *MsgNotify) (*CommReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (*UnimplementedTcpGateDownServer) NotifyUser(ctx context.Context, req *MsgNotifyUser) (*CommReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUser not implemented")
}

func RegisterTcpGateDownServer(s *grpc.Server, srv TcpGateDownServer) {
	s.RegisterService(&_TcpGateDown_serviceDesc, srv)
}

func _TcpGateDown_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpGateDownServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iproto.TcpGateDown/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpGateDownServer).Notify(ctx, req.(*MsgNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcpGateDown_NotifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNotifyUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpGateDownServer).NotifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iproto.TcpGateDown/NotifyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpGateDownServer).NotifyUser(ctx, req.(*MsgNotifyUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _TcpGateDown_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iproto.TcpGateDown",
	HandlerType: (*TcpGateDownServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _TcpGateDown_Notify_Handler,
		},
		{
			MethodName: "NotifyUser",
			Handler:    _TcpGateDown_NotifyUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcpgate.proto",
}
